name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - custom

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ inputs.release_type }}" = "custom" ]; then
            VERSION="${{ inputs.version }}"
          else
            # Get current version
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            
            # Calculate new version based on release type
            case "${{ inputs.release_type }}" in
              major)
                VERSION=$(npx semver $CURRENT_VERSION -i major)
                ;;
              minor)
                VERSION=$(npx semver $CURRENT_VERSION -i minor)
                ;;
              patch)
                VERSION=$(npx semver $CURRENT_VERSION -i patch)
                ;;
            esac
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"
      
      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
      
      - name: Generate changelog
        run: |
          # Create or update CHANGELOG.md
          cat > CHANGELOG.md << EOF
          # Changelog

          ## [v${{ steps.version.outputs.version }}] - $(date +%Y-%m-%d)

          ### Added
          - Linear API integration for MCP server
          - Support for issue management, projects, teams, and users
          - Cross-platform compatibility (Windows, macOS, Linux)
          - TypeScript implementation with full type safety

          ### Changed
          - Updated dependencies to latest versions
          - Improved error handling and logging

          ### Fixed
          - Various bug fixes and performance improvements

          EOF
          
          # Append existing changelog if it exists
          if [ -f CHANGELOG.old.md ]; then
            echo "" >> CHANGELOG.md
            cat CHANGELOG.old.md >> CHANGELOG.md
          fi
      
      - name: Create release branch
        run: |
          git checkout -b release/v${{ steps.version.outputs.version }}
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.version.outputs.version }}"
          git push origin release/v${{ steps.version.outputs.version }}
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/v${{ steps.version.outputs.version }}
          title: "Release v${{ steps.version.outputs.version }}"
          body: |
            ## Release v${{ steps.version.outputs.version }}
            
            This PR prepares the release for version ${{ steps.version.outputs.version }}.
            
            ### Checklist
            - [ ] Version updated in package.json
            - [ ] CHANGELOG.md updated
            - [ ] All tests passing
            - [ ] Ready to publish to npm
            
            ### What's Changed
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/release/v${{ steps.version.outputs.version }}/CHANGELOG.md) for details.
          labels: release, automated
  
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.event.inputs.release_type != ''
    
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: release/v${{ needs.prepare-release.outputs.version }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Run final tests
        run: npm test
        continue-on-error: true
      
      - name: Publish to npm with @lepion scope
        run: |
          # Ensure package name has @lepion scope
          node -e "
            const pkg = require('./package.json');
            if (!pkg.name.startsWith('@lepion/')) {
              pkg.name = '@lepion/' + pkg.name.replace('@', '');
              require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
            }
          "
          
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub tag
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git tag -a v${{ needs.prepare-release.outputs.version }} -m "Release v${{ needs.prepare-release.outputs.version }}"
          git push origin v${{ needs.prepare-release.outputs.version }}
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          release_name: Release v${{ needs.prepare-release.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
      
      - name: Merge release branch
        run: |
          git checkout main
          git merge --no-ff release/v${{ needs.prepare-release.outputs.version }}
          git push origin main
          git push origin --delete release/v${{ needs.prepare-release.outputs.version }}